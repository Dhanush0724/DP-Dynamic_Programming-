class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:


        # def f(i,j):
        #     if i <0 or j < 0:
        #         return 0
            
        #     if s[i] == s1[j] :
        #         return 1 + f(i-1,j-1)
            
        #     return max(f(i-1,j),f(i,j-1))

        # s1 = s[::-1]
        # return f(len(s)-1,len(s1)-1)

        n = len(s)
        s1 = s[::-1]
        m = len(s1)

        dp = [[-1 for _ in range(m+1)] for _ in range(n+1)]

        for i in range(n+1):
            dp[i][0] = 0
        for j in range(m+1):
            dp[0][j] = 0

        for ind1 in range(1,n+1):
            for ind2 in range(1,m+1):
                if s[ind1-1] == s1[ind2-1]:
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1]
                else :
                    dp[ind1][ind2] = max(dp[ind1-1][ind2],dp[ind1][ind2-1])
        return dp[n][m]

        
