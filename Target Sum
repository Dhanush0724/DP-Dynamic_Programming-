class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        
        # def f(ind,curr_sum):
        #     if ind == len(nums):

        #         return 1 if curr_sum == target else 0
            
        #     pos = f(ind+1,curr_sum+nums[ind])
        #     neg = f(ind+1,curr_sum-nums[ind])

        #     return pos+neg
        # return f(0,0)

        # def f(ind,curr_sum,memo):
        #     if ind == len(nums):

        #         return 1 if curr_sum == target else 0
        #     if (ind,curr_sum) in memo:

        #         return memo[(ind,curr_sum)]
        #     pos = f(ind+1,curr_sum+nums[ind],memo)
        #     neg = f(ind+1,curr_sum-nums[ind],memo)

        #     memo[(ind,curr_sum)] =  pos+neg
        #     return memo[(ind,curr_sum)]
        # return f(0,0,{})

        # from functools import lru_cache
        # @lru_cache(None)
        # def f(ind,curr_sum):
        #     if ind == len(nums):

        #         return 1 if curr_sum == target else 0
            
        #     pos = f(ind+1,curr_sum+nums[ind])
        #     neg = f(ind+1,curr_sum-nums[ind])

        #     return pos+neg
        # return f(0,0)

        
