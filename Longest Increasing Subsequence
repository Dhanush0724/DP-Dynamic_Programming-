class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:

        # def f(ind,prev):

        #     if ind == len(nums):
        #         return 0
        #     take = 0
        #     if prev == -1 or nums[ind] > nums[prev]:
        #         take = 1 + f(ind+1,ind)
        #     notake = 0 + f(ind+1,prev)
        #     return max(take,notake)
        
        # return f(0,-1)

        # def f(ind,prev,dp):

        #     if ind == len(nums):
        #         return 0
        #     if dp[ind][prev+1] != -1:
        #         return dp[ind][prev+1]
        #     take = 0
        #     if prev == -1 or nums[ind] > nums[prev]:
        #         take = 1 + f(ind+1,ind,dp)
        #     notake = 0 + f(ind+1,prev,dp)
        #     dp[ind][prev+1] =  max(take,notake)
        #     return dp[ind][prev+1]
        # n = len(nums)
        # dp = [[-1 for _ in range(n+1)] for _ in range(n)]
        # return f(0,-1,dp)

        n = len(nums)

        # dp = [[0 for _  in range(n+1)] for _ in range(n+1)]

        # for ind in range(n-1,-1,-1):
        #     for prev in range(n-1,-2,-1):
        #         take = 0
        #         if prev == -1 or nums[ind] > nums[prev]:
        #             take = 1 + dp[ind+1][ind+1]
        #         notake = 0 + dp[ind+1][prev+1]
        #         dp[ind][prev+1] = max(take,notake)
        
        # return dp[0][0]


        if not nums:
            return 0
        
        n = len(nums)
        dp = [1] * n

        for i in range(1, n):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j] + 1)

        return max(dp)
        
