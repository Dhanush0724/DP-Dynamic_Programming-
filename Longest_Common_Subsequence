class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:

        # def f(i,j):
        #     if i <0 or j < 0:
        #         return 0

        #     if text1[i] == text2[j] :
        #         return 1 + f(i-1,j-1)

        #     return max(f(i-1,j),f(i,j-1))

        # return f(len(text1)-1,len(text2)-1)


        # def f(i,j):

        #     if i <0 or j < 0:
        #         return 0

        #     if dp[i][j] != -1 :
        #         return dp[i][j]
        #     if text1[i] == text2[j] :
        #         return 1 + f(i-1,j-1)

        #     dp[i][j] =  max(f(i-1,j),f(i,j-1))
        #     return dp[i][j]
        # n = len(text1)
        # m = len(text2)
        # dp = [[-1 for _ in range(m)]for _ in range(n)]
        # return f(n-1,m-1)


        # ## shifting indexes for tabulation 

        n = len(text1)
        m = len(text2)

        dp  = [[-1 for _ in range(m+1)]for _ in range(n+1)]

        for i in range(n+1):
            dp[i][0] = 0
        for j in range(m+1):
            dp[0][j] = 0
        
        for ind1 in range(1,n+1):
            for ind2 in range(1,m+1):
                if text1[ind1-1] == text2[ind2-1]:
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1]
                
                else :
                    dp[ind1][ind2] = max(dp[ind1-1][ind2],dp[ind1][ind2-1])
        
        return dp[n][m]

            

        
