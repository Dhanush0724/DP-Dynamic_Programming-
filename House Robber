class Solution:
    def rob(self, nums: List[int]) -> int:

        # def f(ind):
            
        #     if ind == 0 :
        #         return nums[0]
        #     if ind < 0 :
        #         return 0
        #     pick = nums[ind] + f(ind-2)
        #     notpick = 0 + f(ind-1)

        #     return max(pick,notpick)

        # return f(len(nums)-1)
        
        # def f(ind,dp):
        #     if ind == 0:
        #         return nums[ind]
        #     if ind < 0 :
        #         return 0
            
        #     if dp[ind] != -1 :
        #         return dp[ind]

        #     pick = nums[ind] + f(ind-2,dp)
        #     notpick = 0 + f(ind-1,dp)
        #     dp[ind] = max(pick,notpick)
        #     return dp[ind]
        
        # dp = [-1]*(len(nums))
        # return f(len(nums)-1,dp)

        # dp = [0]*len(nums)
        # dp[0] = nums[0]
        # for i in range(1,len(nums)):
        #     pick = nums[i] + (dp[i-2] if i-2 >= 0 else 0)
        #     notpick = dp[i-1]
        #     dp[i] = max(pick,notpick)
        
        # return dp[len(nums)-1]


        dp = [0]*len(nums)
        prev2 = 0
        prev1 = nums[0]
        for i in range(1,len(nums)):
            pick = nums[i] + prev2
            notpick = prev1
            curr = max(pick,notpick)
            prev2,prev1 = prev1,curr
        
        return prev1


        
