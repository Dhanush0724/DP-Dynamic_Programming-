class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        

        # def f(ind,T):
        #     if T < 0 or ind < 0:
        #         return False
        #     if T == 0 :
        #         return True
            
        #     pick = f(ind-1,T-nums[ind])
        #     not_pick = f(ind-1,T)

        #     return max(pick,not_pick)
            
        # total_sum = sum(nums)
        # if total_sum % 2 != 0:
        #     return False
        # return f(len(nums)-1,total_sum//2)

        # def f(ind,T,memo):
        #     if T < 0 or ind < 0:
        #         return False
        #     if T == 0 :
        #         return True
        #     if (ind,T) in memo:
        #         return memo[(ind,T)]
            
        #     pick = f(ind-1,T-nums[ind],memo)
        #     not_pick = f(ind-1,T,memo)

        #     memo[(ind,T)] = max(pick,not_pick)
        #     return memo[(ind,T)]
            
        # total_sum = sum(nums)
        # if total_sum % 2 != 0:
        #     return False
        
        # return f(len(nums)-1,total_sum//2,{})

        total_sum = sum(nums)

        if total_sum % 2 != 0 :
            return False
        T = total_sum//2

        dp = [[False]*(T+1) for _ in range(len(nums)+1)]

        for i in range(len(nums)+1):
            dp[i][0] = True
        
        for i in range(1,len(nums)+1):
            for j in range(1,T+1):
                
                
                not_pick = dp[i-1][j]
                pick = False
                if j >= nums[i - 1]:
                    pick = dp[i - 1][j - nums[i - 1]]

                dp[i][j] = pick or not_pick

            
        return dp[len(nums)][T]
