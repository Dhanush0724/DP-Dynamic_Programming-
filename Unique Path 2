class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:

        # n = len(obstacleGrid)
        # m = len(obstacleGrid[0])
        # if obstacleGrid[0][0] == 1 or obstacleGrid[n-1][m-1] == 1:
        #     return 0
        # def f(i,j):
        #     if i >= n or j >= m:
        #         return 0
        #     if i == n-1 and j == m-1:
        #         return 1
        #     if obstacleGrid[i][j] == 1:
        #         return 0
        #     else :
        #         down = f(i+1,j)
        #         right = f(i,j+1)

        #         return down+right

        # return f(0,0)




        # n = len(obstacleGrid)
        # m = len(obstacleGrid[0])
        # if obstacleGrid[0][0] == 1 or obstacleGrid[n-1][m-1] == 1:
        #     return 0
        # def f(i,j,dp):
        #     if i >= n or j >= m:
        #         return 0
        #     if i == n-1 and j == m-1:
        #         return 1
        #     if dp[i][j] != -1:
        #         return dp[i][j]
        #     if obstacleGrid[i][j] == 1:
        #         return 0
        #     else :
        #         down = f(i+1,j,dp)
        #         right = f(i,j+1,dp)

        #         dp[i][j] = down+right
        #         return dp[i][j]
        # dp = [[-1 for _ in range(m)] for _ in range(n)]
        # return f(0,0,dp)


        # n = len(obstacleGrid)
        # m = len(obstacleGrid[0])
        
        # dp = [[0 for _ in range(m)] for _ in range(n)]
        # if obstacleGrid[0][0] == 1 or obstacleGrid[n-1][m-1] == 1:
        #     return 0
        
        # for i in range(n):
        #     for j in range(m):
            
        #         if obstacleGrid[i][j] == 1:
        #             dp[i][j] = 0
        #         elif i == 0 and j == 0:
        #             dp[0][0] = 1
        #         else :
        #             down = dp[i-1][j] if i>0 else 0
        #             right = dp[i][j-1] if j>0 else 0
        #             dp[i][j] = down+right
        # return dp[n-1][m-1]



        n = len(obstacleGrid)
        m = len(obstacleGrid[0])
        
        prev = [0]*m
        if obstacleGrid[0][0] == 1 or obstacleGrid[n-1][m-1] == 1:
            return 0
        
        for i in range(n):
            curr = [0]*m
            for j in range(m):
                if obstacleGrid[i][j] == 1:
                    curr[j] = 0
                elif i == 0 and j == 0:
                    curr[j] = 1
                else :
                    down = prev[j] if i>0 else 0
                    right = curr[j-1] if j>0 else 0
                    curr[j] = down+right
            prev = curr
        return prev[m-1]
                
        
        




        

        
