class Solution:
    def countSubstrings(self, s: str) -> int:
        # from functools import lru_cache

        # @lru_cache(None)
        # def is_palindrome(i,j):
        #     if i >= j :
        #         return True
        #     if s[i] != s[j] :
        #         return False
        #     return is_palindrome(i+1,j-1)
        # @lru_cache(None)
        # def f(i,j):
        #     if i > j:
        #         return 0
            
        #     count = 1 if is_palindrome(i,j) else 0

        #     return count + f(i+1,j) + f(i,j-1) - f(i+1,j-1)
        
        # return f(0,len(s)-1)
            
        n = len(s)

        dp = [[False]*n for _ in range(n)]
        count = 0

        for i in range(n-1,-1,-1):
            for j in range(i,n):
                if s[i] == s[j] :
                    if j-i<=1:
                        dp[i][j] = True
                    else :
                        dp[i][j] = dp[i+1][j-1]
                if dp[i][j]:
                    count+=1
        return count

            
